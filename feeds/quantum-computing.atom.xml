<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Rishacha's Blog - Quantum Computing</title><link href="https://rishacha.github.io/" rel="alternate"></link><link href="https://rishacha.github.io/feeds/quantum-computing.atom.xml" rel="self"></link><id>https://rishacha.github.io/</id><updated>2022-05-11T00:00:00+05:30</updated><subtitle>Developer searching for excitement</subtitle><entry><title>Quantum Computing Revision</title><link href="https://rishacha.github.io/quantum-computing-revision.html" rel="alternate"></link><published>2022-05-11T00:00:00+05:30</published><updated>2022-05-11T00:00:00+05:30</updated><author><name>Rishabh Chakrabarti</name></author><id>tag:rishacha.github.io,2022-05-11:/quantum-computing-revision.html</id><summary type="html">&lt;p&gt;My final revision sheet for Quantum Information Systems&lt;/p&gt;</summary><content type="html">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"&gt;&lt;/script&gt;

&lt;style type="text/css"&gt;
img {
    max-width:none
}
div.output_area img, div.output_area svg {
    max-width: none;
    height: auto;
}

div.output_subarea {
    overflow-x: auto;
    -webkit-box-flex: 1;
    -moz-box-flex: 1;
    box-flex: 1;
    flex: 1;
    max-width: none;
}

div.output_area img, div.output_area svg {
    max-width: none;
    background-color: hsl(0deg 30% 80%);
    height: auto;
}
/*.MathJax,.MathJax_Display {
    color: hsl(0deg 30% 80%);
}*/
.cell p{
     overflow-x: auto;
    -webkit-box-flex: 1;
    -moz-box-flex: 1;
    box-flex: 1;
    flex: 1;
    max-width: none;
}
&lt;/style&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Quantum-Computing"&gt;Quantum Computing&lt;a class="anchor-link" href="#Quantum-Computing"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;qiskit.quantum_info&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Statevector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DensityMatrix&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="The-Basic-Rules-of-Quantum-Mechanics"&gt;The Basic Rules of Quantum Mechanics&lt;a class="anchor-link" href="#The-Basic-Rules-of-Quantum-Mechanics"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h4 id="Superposition---$\alpha|0\rangle-+-\beta|1\rangle$----Combination-of-2-basis-states"&gt;Superposition - $\alpha|0\rangle + \beta|1\rangle$ -- Combination of 2 basis states&lt;a class="anchor-link" href="#Superposition---$\alpha|0\rangle-+-\beta|1\rangle$----Combination-of-2-basis-states"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h4 id="Measurement"&gt;Measurement&lt;a class="anchor-link" href="#Measurement"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;$$|\psi\rangle = \frac{\sqrt{3}}{2} |0\rangle + \frac{1}{2}|1\rangle$$&lt;h5 id="Borne-Rule--"&gt;Borne Rule -&lt;a class="anchor-link" href="#Borne-Rule--"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;$$Pr(0) = \left|\langle0|\alpha\rangle\right|={\left|\alpha\right|}^2 = {\left|\frac{\sqrt{3}}{2}\right|}^2 = \frac{3}{4}$$$$Pr(1) = \left|\langle1|\beta\rangle\right|={\left|\beta\right|}^2 = {\left|\frac{1}{2}\right|}^2 = \frac{1}{4}$$&lt;h5 id="Different-Basis-for-measurement---Introducing-Hadamard-Gate"&gt;Different Basis for measurement - Introducing Hadamard Gate&lt;a class="anchor-link" href="#Different-Basis-for-measurement---Introducing-Hadamard-Gate"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;$$|+\rangle = \frac{(|0\rangle + |1\rangle)}{\sqrt{2}}$$$$|-\rangle = \frac{(|0\rangle - |1\rangle)}{\sqrt{2}}$$$$|0\rangle = \frac{(|+\rangle + |-\rangle)}{\sqrt{2}}$$$$|1\rangle = \frac{(|+\rangle - |-\rangle)}{\sqrt{2}}$$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="Global-vs-Relative-Phase"&gt;Global vs Relative Phase&lt;a class="anchor-link" href="#Global-vs-Relative-Phase"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;img src="/media/global_phase1.png" alt="image.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/media/global_phase3.png" alt="image.png"&gt;&lt;/p&gt;
&lt;h4 id="So-we-can-only-distinguish-between-relative-phase"&gt;So we can only distinguish between relative phase&lt;a class="anchor-link" href="#So-we-can-only-distinguish-between-relative-phase"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="Quantum-Gates(Unitary-Matrices)-and-Circuits"&gt;Quantum Gates(Unitary Matrices) and Circuits&lt;a class="anchor-link" href="#Quantum-Gates(Unitary-Matrices)-and-Circuits"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Hadamard&lt;/p&gt;
&lt;h5 id="Universal-Gate-Sets"&gt;Universal Gate Sets&lt;a class="anchor-link" href="#Universal-Gate-Sets"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Claude Shannon's Theory for Classical Boolean Functions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Classical universality - NAND gate&lt;/li&gt;
&lt;li&gt;Quantum universality gate set $\mathcal{S}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="/media/quantum_universality.jpg" alt="quantum_universality"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gottesman-Knill Theorem&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solovay-Kitaev Theorem&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="NO-CLONING-Theorem"&gt;NO-CLONING Theorem&lt;a class="anchor-link" href="#NO-CLONING-Theorem"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src="/media/no_cloning1.png" alt="image.png"&gt;&lt;/p&gt;
&lt;h6 id="Multi-qubit-states-and-Partial-measurement"&gt;Multi-qubit states and Partial measurement&lt;a class="anchor-link" href="#Multi-qubit-states-and-Partial-measurement"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;Consider the state - $|\psi\rangle = \alpha|00\rangle + \beta|01\rangle + \delta|10\rangle + \gamma|11\rangle$&lt;/p&gt;
&lt;p&gt;If you measure Pr[Qubit 1 is 0] , using partial measurement --&amp;gt; We get a joint state&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="The-Church-Turing-Thesis"&gt;The Church-Turing Thesis&lt;a class="anchor-link" href="#The-Church-Turing-Thesis"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Classical-Probability-Theory"&gt;Classical Probability Theory&lt;a class="anchor-link" href="#Classical-Probability-Theory"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="The-Zeno-Effect"&gt;The Zeno Effect&lt;a class="anchor-link" href="#The-Zeno-Effect"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h5 id="The-Elitzur-Vaidman-Bomb"&gt;The Elitzur-Vaidman Bomb&lt;a class="anchor-link" href="#The-Elitzur-Vaidman-Bomb"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Pure-State---superposition-of-basis-states"&gt;Pure State - superposition of basis states&lt;a class="anchor-link" href="#Pure-State---superposition-of-basis-states"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So far, we've just talked about one way of looking at a state. But in reality, states are more complex.&lt;/p&gt;
&lt;h3 id="Mixed-State---A-classical-probability-distribution-over-pure-quantum-states"&gt;Mixed State - A classical &lt;em&gt;probability&lt;/em&gt; distribution over &lt;em&gt;pure&lt;/em&gt; quantum states&lt;a class="anchor-link" href="#Mixed-State---A-classical-probability-distribution-over-pure-quantum-states"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is the true representation of "true" qubit states. An alternate way of actually representing the whole picture probabilistically&lt;/p&gt;
&lt;h5 id="Mixed-State-of-a-qudit-i.e.-a-d-dimensional-quantum-state"&gt;Mixed State of a qudit i.e. a d-dimensional quantum state&lt;a class="anchor-link" href="#Mixed-State-of-a-qudit-i.e.-a-d-dimensional-quantum-state"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;{ $p_1$ probability of $|\psi_1\rangle$,&lt;/p&gt;
&lt;p&gt;$p_2$ probability of $|\psi_2\rangle$,&lt;/p&gt;
&lt;p&gt;.
 .
 .&lt;/p&gt;
&lt;p&gt;$p_m$ probability of $|\psi_m\rangle$ }&lt;/p&gt;
$$\sum_{i=1}^{m}p_i = 1$$&lt;p&gt;and $\{|\psi_1\rangle,|\psi_2\rangle.....|\psi_m\rangle\} \in \mathbb{C}^d$ are unit vectors in d-dimensional space&lt;/p&gt;
&lt;p&gt;Now, say we measure in an orthonormal basis from set $\{u_1,u_2,u_3....u_d\}$&lt;/p&gt;
&lt;p&gt;What is the probability of the measurement being $u_i$ ???&lt;/p&gt;
$$\sum_{j=1}^{m} p_j {|\langle u_i|\psi_j\rangle|}^2$$&lt;p&gt;, Where $p_j$ is the probability of the mixed state being $|\psi_j\rangle$&lt;/p&gt;
&lt;p&gt;Let's tweak the above expression a bit more --&amp;gt;&lt;/p&gt;
&lt;p&gt;Let's break the squared part in the expresssion to ${\langle u_i | \psi_j \rangle}^\dagger = \langle \psi_j | u_i \rangle$. We can substitute this because ${|z|}^2 = z.z^*$&lt;/p&gt;
&lt;p&gt;Thus, the above expression becomes ---&amp;gt;&lt;/p&gt;
$$\sum_{j=1}^{m} p_j |\langle u_i|\psi_j \times \psi_j|ui\rangle|$$&lt;p&gt;We can also push the $\sum_{j=1}^{m} p_j$ term inside with some "math jugglery"&lt;/p&gt;
&lt;p&gt;Pr[ measuring "i"] = $\langle u_i|(\sum_{j=1}^{m} p_j|\psi_j \times \psi_j|)|u_i\rangle$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All the outcome probabilities of any measurement only depend on $\rho = \sum_{j=1}^{m} p_j|\psi_j \times \psi_j|$&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here, $\rho$ is the density matrix and it's the new mathematical way of defining any particle&lt;/p&gt;
&lt;h5 id="Examples"&gt;Examples&lt;a class="anchor-link" href="#Examples"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Particle has a 50% probability of being $|0\rangle$ and 50% of being $|1\rangle$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's construct a density matrix $\rho = \frac{1}{2} \begin{pmatrix} 1 \\0 \end{pmatrix}\begin{pmatrix} 1 &amp;amp; 0 \end{pmatrix} + \frac{1}{2} \begin{pmatrix} 0 \\ 1 \end{pmatrix}\begin{pmatrix} 0 &amp;amp; 1 \end{pmatrix}$&lt;/p&gt;
&lt;p&gt;Thus $\rho = \begin{pmatrix}\frac{1}{2} &amp;amp; 0 \\ 0 &amp;amp; \frac{1}{2}\end{pmatrix}$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Particle has a 50% probability of being $|+\rangle$ and 50% of being $|-\rangle$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's construct a density matrix $\rho = \frac{1}{2} \begin{pmatrix} \frac{1}{\sqrt{2}} \\\frac{1}{\sqrt{2}} \end{pmatrix}\begin{pmatrix} \frac{1}{\sqrt{2}} &amp;amp; \frac{1}{\sqrt{2}} \end{pmatrix} + \frac{1}{2} \begin{pmatrix} \frac{1}{\sqrt{2}} \\ \frac{-1}{\sqrt{2}} \end{pmatrix}\begin{pmatrix} \frac{1}{\sqrt{2}} &amp;amp; \frac{-1}{\sqrt{2}} \end{pmatrix}$&lt;/p&gt;
&lt;p&gt;Thus $\rho = \begin{pmatrix}\frac{1}{2} &amp;amp; 0 \\ 0 &amp;amp; \frac{1}{2}\end{pmatrix}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thus, one cannot distinguish between the {0,1} or the {+,-} mixed states&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/media/mixed_state1.png" alt="image.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Particle has 100% probability of being $|0\rangle$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$\rho = \begin{pmatrix}1 \\ 0\end{pmatrix}\begin{pmatrix}1 &amp;amp; 0\end{pmatrix}= \begin{pmatrix}1&amp;amp;0 \\ 0&amp;amp;0\end{pmatrix}$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Particle has 100% probability of being $-|0\rangle$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$\rho = \begin{pmatrix}-1 \\ 0\end{pmatrix}\begin{pmatrix}-1 &amp;amp; 0\end{pmatrix} = \begin{pmatrix}1&amp;amp;0 \\ 0&amp;amp;0\end{pmatrix}$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Particle has 100% probability of being $i|0\rangle$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$\rho = \begin{pmatrix}i \\ 0\end{pmatrix}\begin{pmatrix}-i &amp;amp; 0\end{pmatrix} = \begin{pmatrix}1&amp;amp;0 \\ 0&amp;amp;0\end{pmatrix}$&lt;/p&gt;
&lt;p&gt;3,4,5 Prove the following&lt;/p&gt;
&lt;p&gt;&lt;img src="/media/global_phase2.png" alt="image-2.png"&gt;&lt;/p&gt;
&lt;h4 id="SUCH-A-c-is-called-a-&amp;quot;GLOBAL-PHASE&amp;quot;"&gt;SUCH A c is called a "GLOBAL PHASE"&lt;a class="anchor-link" href="#SUCH-A-c-is-called-a-&amp;quot;GLOBAL-PHASE&amp;quot;"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;EPR pair $\frac{1}{\sqrt{2}}|00\rangle + \frac{1}{\sqrt{2}}|11\rangle$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$\rho = \begin{pmatrix}\frac{1}{\sqrt{2}} \\ 0 \\ 0 \\ \frac{1}{\sqrt{2}}\end{pmatrix}\begin{pmatrix}\frac{1}{\sqrt{2}} &amp;amp; 0 &amp;amp; 0 &amp;amp; \frac{1}{\sqrt{2}}\end{pmatrix} = \begin{pmatrix}\frac{1}{\sqrt{2}} &amp;amp; 0 &amp;amp; 0 &amp;amp; \frac{1}{\sqrt{2}} \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\ 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \\ \frac{1}{\sqrt{2}} &amp;amp; 0 &amp;amp; 0 &amp;amp; \frac{1}{\sqrt{2}}  \end{pmatrix}$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Test&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="Properties-of-Density-matrix"&gt;Properties of Density matrix&lt;a class="anchor-link" href="#Properties-of-Density-matrix"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Hermitian (complex number analogue of symmetric) --&amp;gt; $\rho^\dagger = \rho$. $(\sum_{j=1}^{m} p_j|\psi_j \times \psi_j|)$&lt;/li&gt;
&lt;li&gt;They're "positive" (a.k.a. "positive semi-definite") meaning $\forall |u\rangle, \langle u | \rho|u\rangle \ge 0$&lt;/li&gt;
&lt;li&gt;$\sum_{i=1}^{d}\rho_{ii} =1$ --&amp;gt; Trace of $\rho$ or $tr(\rho)$ = 1. Sum of diagonal elements is $1$&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="Working-with-density-matrices-$\rho$"&gt;Working with density matrices $\rho$&lt;a class="anchor-link" href="#Working-with-density-matrices-$\rho$"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Apply a unitary matrix to the density matrix --&amp;gt; What is the "$p_j$ probability of $U|\psi\rangle$" and $j = (1,2,.....m)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NEW Density matrix $\rho' = U\rho U^\dagger$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Measuring in standard basis &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{ $\rho_{11}$ probability of $|\psi_1\rangle$,&lt;/p&gt;
&lt;p&gt;$\rho_{22}$  probability of $|\psi_2\rangle$,&lt;/p&gt;
&lt;p&gt;$\vdots$&lt;/p&gt;
&lt;p&gt;$\rho_{dd}$  probability of $|\psi_d\rangle$ }&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mixed states having same diagonal entries, will give the same measurement probabilities if measured in the standard basis, but different measurements in other basis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src="/media/hermitian_mixed_state1.png" alt="image.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="Bloch-Sphere"&gt;Bloch Sphere&lt;a class="anchor-link" href="#Bloch-Sphere"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src="/media/bloch.jpg" alt="bloch"&gt;&lt;/p&gt;
&lt;h5 id="Bloch-Sphere-and-Mixed-states---&amp;gt;"&gt;Bloch Sphere and Mixed states --&amp;gt;&lt;a class="anchor-link" href="#Bloch-Sphere-and-Mixed-states---&amp;gt;"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Entanglement"&gt;Entanglement&lt;a class="anchor-link" href="#Entanglement"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id="For-a-mixture-of-pure-states----&amp;gt;-You-can't-break-your-state-into-a-tensor-product-if-they're-entangled"&gt;For a mixture of pure states ---&amp;gt; You can't break your state into a tensor product if they're entangled&lt;a class="anchor-link" href="#For-a-mixture-of-pure-states----&amp;gt;-You-can't-break-your-state-into-a-tensor-product-if-they're-entangled"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h5 id="Quantifying-Entanglement-and-Mixed-State-Entanglement"&gt;Quantifying Entanglement and Mixed State Entanglement&lt;a class="anchor-link" href="#Quantifying-Entanglement-and-Mixed-State-Entanglement"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h6 id="Schmidt-Decomposition"&gt;Schmidt Decomposition&lt;a class="anchor-link" href="#Schmidt-Decomposition"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;Given a bi-partite state $\sum_{ij} \alpha_{ij} {|i\rangle}_A{|j\rangle}_B$. &lt;em&gt;How do we calculate how many Bell pairs it's worth?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perform an SVD on the density matrix $\rho$ and get the eigenvalues.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="Von-Neuman-Entropy"&gt;Von-Neuman Entropy&lt;a class="anchor-link" href="#Von-Neuman-Entropy"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;Von-Neumann Entropy for a pure state ($|\psi\rangle=\alpha|0\rangle + \beta|1\rangle$) is 0&lt;/p&gt;
&lt;p&gt;Von-Neumann Entropy for a mixed state, given $\rho$ is --&amp;gt;&lt;/p&gt;
$$S(\rho) = \sum_{i=0}^{n-1} \gamma_i log_2(\frac{1}{\gamma_i})$$&lt;p&gt;Where $\{\gamma_i\}$ are the eigenvalues of $\rho$.. We use Schmidt form here.&lt;/p&gt;
&lt;h6 id="Entanglement-Entropy"&gt;Entanglement Entropy&lt;a class="anchor-link" href="#Entanglement-Entropy"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;&lt;em&gt;How to quantify entanglement?&lt;/em&gt; Say for example, if entropy is .942, then for 1000 copies, 942 qubits can be teleported&lt;/p&gt;
&lt;h6 id="Entanglement-Entropy-for-a-(pure)-bi-partite-state"&gt;Entanglement Entropy for a (pure) bi-partite state&lt;a class="anchor-link" href="#Entanglement-Entropy-for-a-(pure)-bi-partite-state"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;h4 id="Mixed-State-entanglement"&gt;Mixed State entanglement&lt;a class="anchor-link" href="#Mixed-State-entanglement"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h5 id="The-GHZ-State-and-Monogamy-of-Entanglement"&gt;The GHZ State and Monogamy of Entanglement&lt;a class="anchor-link" href="#The-GHZ-State-and-Monogamy-of-Entanglement"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;If Alice and Bob share a Maximally Entangled State, $q_A$ and $q_B$. Then $q_A$ cannot be maximally entangled with $q_C$ , a $3^{rd}$ party. This is the monogamy of entanglement. &lt;/li&gt;
&lt;li&gt;If you extend this idea to the GHZ state, you can only see the entanglement if you have all 3 qubits together. Imagine it as Borromean rings. Removing any one ring, unentangles the other 2 rings. &lt;img src="/media/borromean.jpeg" alt="Borromean rings"&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;state_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Statevector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="n"&gt;state_vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;latex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[18]:&lt;/div&gt;




&lt;div class="output_latex output_subarea output_execute_result"&gt;
$$\frac{\sqrt{6}}{3} |0\rangle+\frac{\sqrt{3}}{3} |1\rangle$$
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;state_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Statevector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;state_vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;latex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[14]:&lt;/div&gt;




&lt;div class="output_latex output_subarea output_execute_result"&gt;
$$\frac{1}{2} |00\rangle+\frac{i}{2} |01\rangle+\frac{i}{2} |10\rangle+\frac{1}{2} |11\rangle$$
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state_vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[15]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;state_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Statevector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DensityMatrix&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;  &lt;span class="c1"&gt;# Density matrix object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[10]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;state_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Statevector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state_3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[11]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;state_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Statevector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;dm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DensityMatrix&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[13]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1.0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[&amp;nbsp;]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;state_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Statevector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;state_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Statevector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state_3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[10]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;0&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DensityMatrix&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;  &lt;span class="c1"&gt;# Density matrix object&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entropy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state_vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;0.9182958340544896
0
False
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="Create-a-maximally-entangled-state"&gt;Create a maximally entangled state&lt;a class="anchor-link" href="#Create-a-maximally-entangled-state"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;img src="/media/epr_generation_circuit.png" alt="image.png"&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Entangled-pair-of-qubits---Bell-pair/EPR-Pair---&amp;gt;-$|\frac{00\rangle-+-|11\rangle}{\sqrt{2}}$"&gt;Entangled &lt;em&gt;pair&lt;/em&gt; of qubits - Bell pair/EPR Pair --&amp;gt; $|\frac{00\rangle + |11\rangle}{\sqrt{2}}$&lt;a class="anchor-link" href="#Entangled-pair-of-qubits---Bell-pair/EPR-Pair---&amp;gt;-$|\frac{00\rangle-+-|11\rangle}{\sqrt{2}}$"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Inter conversion between various states ---&amp;gt; $|\frac{++\rangle + |--\rangle}{\sqrt{2}}$&lt;/p&gt;
&lt;p&gt;These 2 states are not distinguishable as such&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h6 id="Hidden-Variables"&gt;Hidden Variables&lt;a class="anchor-link" href="#Hidden-Variables"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;h6 id="Nonlocal-Games"&gt;Nonlocal Games&lt;a class="anchor-link" href="#Nonlocal-Games"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;h5 id="CHSH-Game"&gt;CHSH Game&lt;a class="anchor-link" href="#CHSH-Game"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;img src="/media/chsh.jpg" alt="chsh_game"&gt;&lt;/p&gt;
&lt;h5 id="Bell's-Inequality"&gt;Bell's Inequality&lt;a class="anchor-link" href="#Bell's-Inequality"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;img src="/media/chsh1.png" alt="image.png"&gt;&lt;/p&gt;
&lt;h5 id="Quantum-Teleportation---Faster-than-light-communication-?-(Doesn't-violate-No-Cloning)"&gt;Quantum Teleportation - Faster than light communication ? (Doesn't violate No-Cloning)&lt;a class="anchor-link" href="#Quantum-Teleportation---Faster-than-light-communication-?-(Doesn't-violate-No-Cloning)"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;1 SHARED EPR-Pair + 2bits $\ge$ 1 Qubit --&amp;gt; Read as RHS is required to transport/teleport LHS --&amp;gt; 1 qubit.&lt;/li&gt;
&lt;li&gt;Assume Alice and Bob have a way of doing "distributed CNOT". Thus, they start with &lt;/li&gt;
&lt;/ul&gt;
$$|\psi\rangle = \alpha|00\rangle + \beta |11\rangle$$&lt;ol&gt;
&lt;li&gt;Alice does Hadamard on her qubit and measures -&lt;/li&gt;
&lt;/ol&gt;
$$H|\psi\rangle = \alpha|+0\rangle + \beta |-1\rangle = \frac{\alpha}{\sqrt{2}}|00\rangle + \frac{\alpha}{\sqrt{2}}|01\rangle + \frac{\beta}{\sqrt{2}}|10\rangle - \frac{\beta}{\sqrt{2}}|11\rangle$$&lt;ol&gt;
&lt;li&gt;2 possible outcomes emerge from the above state post measurement. &lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If Alice measures 0, Bob's state collapses to --&amp;gt; $|\psi\rangle = \alpha|0\rangle + \beta |1\rangle$&lt;/li&gt;
&lt;li&gt;If Alice measures 1, Bob's state collapses to --&amp;gt; $|\psi\rangle = \alpha|0\rangle - \beta |1\rangle$&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;CLASSICAL BIT 2 --&amp;gt; Alice now sends the measured output to Bob&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If the measured bit is 0, Bob does nothing&lt;/li&gt;
&lt;li&gt;If the measured bit is 1, Bob applies Z gate to $|\psi\rangle = \alpha|0\rangle - \beta |1\rangle$ and gets $Z|\psi\rangle = \alpha|0\rangle + \beta |1\rangle$ &lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;HOW to get the "distributed CNOT"???&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="/media/teleportation.jpg" alt="teleportation"&gt;&lt;/p&gt;
&lt;h5 id="Entanglement-Swapping"&gt;Entanglement Swapping&lt;a class="anchor-link" href="#Entanglement-Swapping"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;img src="/media/entanglement_swapping.png" alt="swapping"&gt;&lt;/p&gt;
&lt;h5 id="Weisner's-money-scheme---BBBW-'82"&gt;Weisner's money scheme - BBBW '82&lt;a class="anchor-link" href="#Weisner's-money-scheme---BBBW-'82"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Works using the &lt;code&gt;No-Cloning Theorem&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bank issues a multi-qubit state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security parameter - 'n'&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Bank picks a random $s \in {\{0,1\}}^n$&lt;/li&gt;
&lt;li&gt;Bank picks $q \in {\{0,1,+,-\}}^n$&lt;/li&gt;
&lt;li&gt;Bank creates - $|\psi\rangle = |0\rangle\otimes|+\rangle\otimes|1\rangle\otimes|-\rangle....$&lt;/li&gt;
&lt;li&gt;Bank maintains $(s,q)$&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You get $(s,\psi)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bank can verify if the state/coin is valid/forged by using $q$ and measuring in the right basis. If all the measurements pass, it's a valid coin.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Attacks on Weisner&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Simple attack - Counterfeiter measures each qubit in the std. basis&lt;/li&gt;
&lt;li&gt;Interactive attack - Elitzur-Vaidmann Bomb&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="QKD-and-BB84"&gt;QKD and BB84&lt;a class="anchor-link" href="#QKD-and-BB84"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Shared key is required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROTOCOL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/media/bb84.jpg" alt="bb84"&gt;&lt;/p&gt;
&lt;h5 id="Super-dense-coding"&gt;Super dense coding&lt;a class="anchor-link" href="#Super-dense-coding"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Holevo's Theorem&lt;/strong&gt;: Alice can't send more than one bit per qubit to Bob.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROTOCOL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/media/superdense.jpg" alt="superdense"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1-qubit + 1 shared ebit $\ge$ 2 classical bits&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Quantum-Query-Complexity"&gt;Quantum Query Complexity&lt;a class="anchor-link" href="#Quantum-Query-Complexity"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;There are 2 major ways to look at complexity of quantum algorithms --&amp;gt;&lt;/p&gt;
&lt;h5 id="Circuit-Complexity"&gt;Circuit Complexity&lt;a class="anchor-link" href="#Circuit-Complexity"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Query-Complexity-aka-Black-Box-Model"&gt;Query Complexity aka Black-Box Model&lt;a class="anchor-link" href="#Query-Complexity-aka-Black-Box-Model"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h4 id="Quantum-Garbage-Collection"&gt;Quantum Garbage Collection&lt;a class="anchor-link" href="#Quantum-Garbage-Collection"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="QUANTUM-ALGORITHMS"&gt;QUANTUM ALGORITHMS&lt;a class="anchor-link" href="#QUANTUM-ALGORITHMS"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id="Deutsch-Jozsa-Algorithm"&gt;&lt;a href="https://qiskit.org/textbook/ch-algorithms/deutsch-jozsa.html"&gt;Deutsch-Jozsa Algorithm&lt;/a&gt;&lt;a class="anchor-link" href="#Deutsch-Jozsa-Algorithm"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h5 id="Oracle-function---&amp;gt;-$f({\{0,1\}}^n)-\rightarrow-{0,1}$."&gt;Oracle function --&amp;gt; $f({\{0,1\}}^n) \rightarrow {0,1}$.&lt;a class="anchor-link" href="#Oracle-function---&amp;gt;-$f({\{0,1\}}^n)-\rightarrow-{0,1}$."&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Check if the function is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Balanced&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h5 id="Classically----&amp;gt;-$2^{n-1}-+1$-queries"&gt;Classically ---&amp;gt; $2^{n-1} +1$ queries&lt;a class="anchor-link" href="#Classically----&amp;gt;-$2^{n-1}-+1$-queries"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Quantum----&amp;gt;-Only-1-query/pass-through-the-circuit"&gt;Quantum ---&amp;gt; Only 1 query/pass through the circuit&lt;a class="anchor-link" href="#Quantum----&amp;gt;-Only-1-query/pass-through-the-circuit"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h3 id="Bernstein-Vazirani-Algorithm"&gt;&lt;a href="https://qiskit.org/textbook/ch-algorithms/bernstein-vazirani.html"&gt;Bernstein-Vazirani Algorithm&lt;/a&gt;&lt;a class="anchor-link" href="#Bernstein-Vazirani-Algorithm"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h5 id="Oracle-function---&amp;gt;-$f(x)-=-s.x(mod-2)$.-i.e.-a-bit-wise-produce-of-input-with-a-'secret'-string-$s$.-Find-$s$"&gt;Oracle function --&amp;gt; $f(x) = s.x(mod 2)$. i.e. a bit-wise produce of input with a 'secret' string $s$. Find $s$&lt;a class="anchor-link" href="#Oracle-function---&amp;gt;-$f(x)-=-s.x(mod-2)$.-i.e.-a-bit-wise-produce-of-input-with-a-'secret'-string-$s$.-Find-$s$"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Classically---&amp;gt;-n-queries-to-the-Oracle"&gt;Classically --&amp;gt; n queries to the Oracle&lt;a class="anchor-link" href="#Classically---&amp;gt;-n-queries-to-the-Oracle"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Quantum---&amp;gt;-1-query/pass-through-the-circuit"&gt;Quantum --&amp;gt; 1 query/pass through the circuit&lt;a class="anchor-link" href="#Quantum---&amp;gt;-1-query/pass-through-the-circuit"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h3 id="Simon&amp;#8217;s-Algorithm"&gt;&lt;a href="https://qiskit.org/textbook/ch-algorithms/simon.html"&gt;Simon&amp;#8217;s Algorithm&lt;/a&gt;&lt;a class="anchor-link" href="#Simon&amp;#8217;s-Algorithm"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h5 id="Oracle-Function---&amp;gt;-$f(x)$-has-following-properties"&gt;Oracle Function --&amp;gt; $f(x)$ has following properties&lt;a class="anchor-link" href="#Oracle-Function---&amp;gt;-$f(x)$-has-following-properties"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Function can be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one-to-one
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;two-to-one
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="Classical-Solution---&amp;gt;-$2^{n-1}-+-1$-queries-to-the-oracle"&gt;Classical Solution --&amp;gt; $2^{n-1} + 1$ queries to the oracle&lt;a class="anchor-link" href="#Classical-Solution---&amp;gt;-$2^{n-1}-+-1$-queries-to-the-oracle"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Quantum-Solution---&amp;gt;-Repeat-$n$-times-to-solve-$b$"&gt;Quantum Solution --&amp;gt; Repeat $n$ times to solve $b$&lt;a class="anchor-link" href="#Quantum-Solution---&amp;gt;-Repeat-$n$-times-to-solve-$b$"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h3 id="Grover's-Algorithm"&gt;&lt;a href="https://qiskit.org/textbook/ch-algorithms/grover.html"&gt;Grover's Algorithm&lt;/a&gt;&lt;a class="anchor-link" href="#Grover's-Algorithm"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id="Problem---&amp;gt;-UNORDERED-SEARCH.-Oracle-$f:\{0,1,....N-1\}-\rightarrow-\{0,1\}$"&gt;Problem --&amp;gt; UNORDERED SEARCH. Oracle $f:\{0,1,....N-1\} \rightarrow \{0,1\}$&lt;a class="anchor-link" href="#Problem---&amp;gt;-UNORDERED-SEARCH.-Oracle-$f:\{0,1,....N-1\}-\rightarrow-\{0,1\}$"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Find if there's an x in the input space for which $f(x) = 1$&lt;/p&gt;
&lt;h4 id="Classical-Solution"&gt;Classical Solution&lt;a class="anchor-link" href="#Classical-Solution"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To find the purple box -- the marked item -- using classical computation, one would have to check on average  $\frac{N}{2}$ of these boxes, and in the worst case, all $N$ of them.&lt;/p&gt;
&lt;h4 id="Quantum-Solution---$\sqrt{N}$"&gt;Quantum Solution - $\sqrt{N}$&lt;a class="anchor-link" href="#Quantum-Solution---$\sqrt{N}$"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h4 id="Applications-of-Grover's-Algorithm"&gt;Applications of Grover's Algorithm&lt;a class="anchor-link" href="#Applications-of-Grover's-Algorithm"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;hr&gt;
&lt;h3 id="Pre-requisites-to-Shor"&gt;Pre-requisites to Shor&lt;a class="anchor-link" href="#Pre-requisites-to-Shor"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Fermat's Little Theorem&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Euler's Theorem&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Euler's Totient Function&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continued Fractions Algorithm&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="QFT---Quantum-Fourier-Transform"&gt;QFT - Quantum Fourier Transform&lt;a class="anchor-link" href="#QFT---Quantum-Fourier-Transform"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src="/media/qft1.png" alt="qft"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CIRCUIT&lt;/strong&gt;
&lt;img src="/media/qft_circuit.png" alt="qft_circuit"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example - 3bit QFT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/media/qft3.png" alt="qft3"&gt;&lt;/p&gt;
&lt;h3 id="QPE---Quantum-Phase-Estimation"&gt;QPE - Quantum Phase Estimation&lt;a class="anchor-link" href="#QPE---Quantum-Phase-Estimation"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src="/media/qpe_maths.png" alt="qpe_maths"&gt;&lt;/p&gt;
&lt;h2 id="Cryptography-application"&gt;Cryptography application&lt;a class="anchor-link" href="#Cryptography-application"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id="RSA-Algorithm)"&gt;&lt;a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem"&gt;RSA Algorithm&lt;/a&gt;)&lt;a class="anchor-link" href="#RSA-Algorithm)"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id="Diffie-Hellman"&gt;Diffie-Hellman&lt;a class="anchor-link" href="#Diffie-Hellman"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id="Shor&amp;#8217;s-Algorithm"&gt;&lt;a href="https://qiskit.org/textbook/ch-algorithms/shor.html"&gt;Shor&amp;#8217;s Algorithm&lt;/a&gt;&lt;a class="anchor-link" href="#Shor&amp;#8217;s-Algorithm"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id="Problem"&gt;Problem&lt;a class="anchor-link" href="#Problem"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src="/media/shor1.png" alt="shor1"&gt;&lt;/p&gt;
&lt;h5 id="Classical-Solution"&gt;Classical Solution&lt;a class="anchor-link" href="#Classical-Solution"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Quantum Sieve&lt;/p&gt;
&lt;h6 id="Quantum-Solution"&gt;Quantum Solution&lt;a class="anchor-link" href="#Quantum-Solution"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;&lt;img src="/media/shor2.png" alt="image-10.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/media/shor3.png" alt="image-10.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/media/shor4.png" alt="image-12.png"&gt;
&lt;img src="/media/shor5.png" alt="image-13.png"&gt;&lt;/p&gt;
&lt;h4 id="Applications-of-Shor's-Algorithm"&gt;Applications of Shor's Algorithm&lt;a class="anchor-link" href="#Applications-of-Shor's-Algorithm"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;### Shor Qiskit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Classical-error-correction"&gt;Classical error correction&lt;a class="anchor-link" href="#Classical-error-correction"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id="Quantum-errors"&gt;Quantum errors&lt;a class="anchor-link" href="#Quantum-errors"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id="Bit-Flip"&gt;Bit Flip&lt;a class="anchor-link" href="#Bit-Flip"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h4 id="Phase-Flip"&gt;Phase Flip&lt;a class="anchor-link" href="#Phase-Flip"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h4 id="Both-together"&gt;Both together&lt;a class="anchor-link" href="#Both-together"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h3 id="Error-Correcting-Codes"&gt;Error Correcting Codes&lt;a class="anchor-link" href="#Error-Correcting-Codes"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;h5 id="Shor's-9-bit-error-correcting-code"&gt;Shor's 9-bit error correcting code&lt;a class="anchor-link" href="#Shor's-9-bit-error-correcting-code"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Interpretations-of-QM-(Copenhagen,-Dynamical-Collapse,-MWI,-&amp;#8230;)"&gt;Interpretations of QM (Copenhagen, Dynamical Collapse, MWI, &amp;#8230;)&lt;a class="anchor-link" href="#Interpretations-of-QM-(Copenhagen,-Dynamical-Collapse,-MWI,-&amp;#8230;)"&gt;&amp;#182;&lt;/a&gt;&lt;/h4&gt;&lt;h5 id="Copenhagen-Interpretation"&gt;Copenhagen Interpretation&lt;a class="anchor-link" href="#Copenhagen-Interpretation"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;There exist 2 worlds, 1 quantum and 1 classical&lt;/p&gt;
&lt;h5 id="Shut-up-and-Calculate"&gt;Shut up and Calculate&lt;a class="anchor-link" href="#Shut-up-and-Calculate"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Schrodinger's-Cat"&gt;Schrodinger's Cat&lt;a class="anchor-link" href="#Schrodinger's-Cat"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Wigner's-Friend"&gt;Wigner's Friend&lt;a class="anchor-link" href="#Wigner's-Friend"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Dynamical-Collapse"&gt;Dynamical Collapse&lt;a class="anchor-link" href="#Dynamical-Collapse"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="GRW-Theory"&gt;GRW Theory&lt;a class="anchor-link" href="#GRW-Theory"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Penrose-Theory"&gt;Penrose Theory&lt;a class="anchor-link" href="#Penrose-Theory"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h5 id="Many-Worlds-Interpretation"&gt;Many-Worlds Interpretation&lt;a class="anchor-link" href="#Many-Worlds-Interpretation"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;&lt;h6 id="Preferred-Basis-Problem"&gt;Preferred Basis Problem&lt;a class="anchor-link" href="#Preferred-Basis-Problem"&gt;&amp;#182;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;Decoherence Basis&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="Experimental-Realizations-of-Quantum-Computing"&gt;Experimental Realizations of Quantum Computing&lt;a class="anchor-link" href="#Experimental-Realizations-of-Quantum-Computing"&gt;&amp;#182;&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: 'center'," +
        "    displayIndent: '0em'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['$','$'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    } " 
        +"}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;
</content><category term="Quantum Computing"></category><category term="qc"></category><category term="qiskit"></category></entry></feed>